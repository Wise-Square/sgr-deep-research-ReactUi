/**
 * –ü–†–û–°–¢–û–ô –ü–ê–†–°–ï–†
 * –í–°–ï –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ‚Üí —Å–ø–æ–π–ª–µ—Ä
 * QUESTIONS ‚Üí –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
 */

export interface ParseResult {
  mainText: string;
  spoilerText?: string;
  spoilerTitle?: string;
  searchResultsSpoiler?: string;
  searchResultsTitle?: string;
}

export function parseMessage(messageContent: string, questions?: string): ParseResult {
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π
  if (!messageContent.trim()) {
    return {
      mainText: questions || "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...",
      spoilerText: undefined,
      spoilerTitle: undefined
    };
  }
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ–π–ª–µ—Ä
  const spoilerMatch = messageContent.match(/^~~\{([^}]+)\}~~\n(.*)$/s);
  if (spoilerMatch) {
    
    // –ò—â–µ–º title –≤ function
    const titleMatch = messageContent.match(/- Title: ([^-\n]+)/);
    let mainText = '';
    
    if (titleMatch) {
      mainText = `# ${titleMatch[1].trim()}`;
    }
    
    // –ò—â–µ–º content –≤ function
    const contentMatch = messageContent.match(/- Content: ([^-\n]+(?:[^-\n]*\n[^-\n]+)*)/);
    if (contentMatch) {
      const content = contentMatch[1].trim();
      if (mainText) {
        mainText += '\n\n' + content;
      } else {
        mainText = content;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç title/content, –∏—â–µ–º questions
    if (!mainText) {
      const questionsMatch = messageContent.match(/- Questions: ([^-\n]+(?:[^-\n]*\n[^-\n]+)*)/);
      
      if (questionsMatch) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º questions –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
        const questionsText = questionsMatch[1].trim();
        const questionsArray = questionsText.split(',').map(q => q.trim());
        mainText = questionsArray.join('\n');
      }
    }
    
    // –ï—Å–ª–∏ questions –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∏—Ö –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!mainText) {
      const endMatch = messageContent.match(/\n\n([A-Za-z].*)$/s);
      if (endMatch) {
        mainText = endMatch[1];
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º questions –∏–∑ —Å–ø–æ–π–ª–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let spoilerText = spoilerMatch[2];
    if (mainText) {
      // –£–±–∏—Ä–∞–µ–º questions –∏–∑ –∫–æ–Ω—Ü–∞ —Å–ø–æ–π–ª–µ—Ä–∞
      spoilerText = spoilerText.replace(/\n\nWhat specific information.*$/s, '');
    }
    
    return {
      mainText: mainText,
      spoilerText: spoilerText,
      spoilerTitle: spoilerMatch[1]
    };
  }
  
  // –í–°–ï –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–¥–µ—Ç –≤ —Å–ø–æ–π–ª–µ—Ä
  let spoilerContent = messageContent;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
  const searchResultsMatch = messageContent.match(/^([^:\n]+)\n\d{2}:\d{2}\nSearch Results:(.*)$/s);
  if (searchResultsMatch) {
    const title = searchResultsMatch[1].trim();
    const searchResults = searchResultsMatch[2].trim();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const mainText = `# ${title}`;
    
    // –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–¥—É—Ç –≤ —Å–ø–æ–π–ª–µ—Ä
    const spoilerContent = `**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n${searchResults}`;
    
    return {
      mainText: mainText,
      spoilerText: spoilerContent,
      spoilerTitle: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    };
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ JSON, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
  if (messageContent.startsWith('{')) {
    try {
      const jsonData = JSON.parse(messageContent);
      spoilerContent = formatJSONForSpoiler(jsonData);
    } catch (e) {
      // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
      const autoClosedJSON = autoCloseJSON(messageContent);
      try {
        const jsonData = JSON.parse(autoClosedJSON);
        spoilerContent = formatJSONForSpoiler(jsonData);
      } catch (e2) {
        spoilerContent = messageContent;
      }
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å questions, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Å–ø–æ–π–ª–µ—Ä—É
  if (questions && questions.trim()) {
    spoilerContent += '\n\n**Questions:**\n' + questions.trim();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  let mainText = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...";
  
  if (messageContent.startsWith('{')) {
    try {
      const jsonData = JSON.parse(messageContent);
      let mainContentParts = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º questions –µ—Å–ª–∏ –µ—Å—Ç—å (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ)
      if (questions && questions.trim()) {
        mainContentParts.push(questions.trim());
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º function.questions –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑ JSON)
      if (jsonData.function?.questions) {
        const functionQuestions = jsonData.function.questions.join('\n');
        if (functionQuestions.trim()) {
          mainContentParts.push(functionQuestions.trim());
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º function.title –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑ JSON)
      if (jsonData.function?.title) {
        mainContentParts.push(`# ${jsonData.function.title}`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º function.content –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑ JSON) - —ç—Ç–æ –æ—Ç—á–µ—Ç
      if (jsonData.function?.content) {
        mainContentParts.push(jsonData.function.content);
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è agentcompletiontool
      if (jsonData.function?.tool_name_discriminator === 'agentcompletiontool') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º current_situation –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç title
        if (!jsonData.function?.title && jsonData.current_situation) {
          mainContentParts.push(`# ${jsonData.current_situation}`);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º function.reasoning –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ—Ç content
        if (!jsonData.function?.content && jsonData.function?.reasoning) {
          mainContentParts.push(jsonData.function.reasoning);
        }
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è createreporttool
      if (jsonData.function?.tool_name_discriminator === 'createreporttool') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º function.title –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (jsonData.function?.title) {
          mainContentParts.push(`# ${jsonData.function.title}`);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º function.content –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—ç—Ç–æ —Å–∞–º –æ—Ç—á–µ—Ç)
        if (jsonData.function?.content) {
          mainContentParts.push(jsonData.function.content);
        }
      }
      
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º current_situation –∏ plan_status –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
      // –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ø–æ–π–ª–µ—Ä–µ
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
      if (mainContentParts.length > 0) {
        mainText = mainContentParts.join('\n\n');
        if (mainText.includes('### Executive Summary')) {
          console.log('üîç Executive Summary found in mainText:', mainText.substring(0, 200));
        }
      }
      
      
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º questions –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
      mainText = questions && questions.trim() ? questions.trim() : "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...";
    }
  } else {
    // –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º questions –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    mainText = questions && questions.trim() ? questions.trim() : "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...";
  }
  
  return {
    mainText: mainText,
    spoilerText: spoilerContent,
    spoilerTitle: "–ú—ã—Å–ª–∏"
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –¥–ª—è —Å–ø–æ–π–ª–µ—Ä–∞
 */
function autoCloseJSON(jsonString: string): string {
  let result = jsonString;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
  let openBraces = 0;
  let openBrackets = 0;
  let inString = false;
  let escapeNext = false;
  
  for (let i = 0; i < result.length; i++) {
    const char = result[i];
    
    if (escapeNext) {
      escapeNext = false;
      continue;
    }
    
    if (char === '\\') {
      escapeNext = true;
      continue;
    }
    
    if (char === '"' && !escapeNext) {
      inString = !inString;
      continue;
    }
    
    if (!inString) {
      if (char === '{') {
        openBraces++;
      } else if (char === '}') {
        openBraces--;
      } else if (char === '[') {
        openBrackets++;
      } else if (char === ']') {
        openBrackets--;
      }
    }
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏
  if (inString) {
    result += '"';
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
  while (openBrackets > 0) {
    result += ']';
    openBrackets--;
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
  while (openBraces > 0) {
    result += '}';
    openBraces--;
  }
  
  
  return result;
}

function formatJSONForSpoiler(jsonData: any): string {
  
  let result = '';
  
  // Reasoning steps
  if (jsonData.reasoning_steps) {
    result += '**Reasoning steps:**\n';
    jsonData.reasoning_steps.forEach((step: string, index: number) => {
      result += `${index + 1}. ${step}\n`;
    });
    result += '\n';
  }
  
  // Current situation
  if (jsonData.current_situation) {
    result += `**Current situation:** ${jsonData.current_situation}\n\n`;
  }
  
  // Plan status
  if (jsonData.plan_status) {
    result += `**Plan status:** ${jsonData.plan_status}\n\n`;
  }
  
  // Remaining steps
  if (jsonData.remaining_steps) {
    result += '**Remaining steps:**\n';
    jsonData.remaining_steps.forEach((step: string, index: number) => {
      result += `${index + 1}. ${step}\n`;
    });
    result += '\n';
  }
  
  // Task completed
  if (jsonData.task_completed !== undefined) {
    result += `**Task completed:** ${jsonData.task_completed}\n\n`;
  }
  
  // Enough data
  if (jsonData.enough_data !== undefined) {
    result += `**Enough data:** ${jsonData.enough_data}\n\n`;
  }
  
  // Function/Tool calls
  if (jsonData.function) {
    result += '**Function:**\n';
    if (jsonData.function.tool_name_discriminator) {
      result += `- Tool: ${jsonData.function.tool_name_discriminator}\n`;
    }
    if (jsonData.function.reasoning) {
      result += `- Reasoning: ${jsonData.function.reasoning}\n`;
    }
    if (jsonData.function.questions) {
      result += `- Questions: ${jsonData.function.questions.join(', ')}\n`;
    }
    if (jsonData.function.unclear_terms) {
      result += `- Unclear terms: ${jsonData.function.unclear_terms.join(', ')}\n`;
    }
    if (jsonData.function.assumptions) {
      result += `- Assumptions: ${jsonData.function.assumptions.join(', ')}\n`;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è agentcompletiontool
    if (jsonData.function.tool_name_discriminator === 'agentcompletiontool') {
      if (jsonData.function.completed_steps) {
        result += '**Completed steps:**\n';
        jsonData.function.completed_steps.forEach((step: string, index: number) => {
          result += `${index + 1}. ${step}\n`;
        });
        result += '\n';
      }
      if (jsonData.function.status) {
        result += `- Status: ${jsonData.function.status}\n`;
      }
    }
    
    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º title –∏ content –≤ —Å–ø–æ–π–ª–µ—Ä - –æ–Ω–∏ –∏–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    result += '\n';
  }
  
  const finalResult = result.trim();
  return finalResult;
}
